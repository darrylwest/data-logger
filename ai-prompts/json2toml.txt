can you convert this json definition to toml?

{
  "name": "temperature",
  "locations": [
    {
      "location": "cottage",
      "ip": "10.0.1.197",
      "port": 2030,
      "probes": [
        {
          "sensor": 0,
          "location": "cottage-south"
        },
        {
          "sensor": 1,
          "location": "cottage-east"
        }
      ]
    },
    {
      "location": "shed",
      "ip": "10.0.1.115",
      "port": 2030,
      "probes": [
        {
          "sensor": 0,
          "location": "shed-inside"
        },
        {
          "sensor": 1,
          "location": "shed-west"
        }
      ]
    }
  ]
} 

-------------------------------------------------- response

name = "temperature"

[[locations]]
location = "cottage"
ip = "10.0.1.197"
port = 2030

  [[locations.probes]]
  sensor = 0
  location = "cottage-south"

  [[locations.probes]]
  sensor = 1
  location = "cottage-east"

[[locations]]
location = "shed"
ip = "10.0.1.115"
port = 2030

  [[locations.probes]]
  sensor = 0
  location = "shed-inside"

  [[locations.probes]]
  sensor = 1
  location = "shed-west"

--------------------------------------------------

can you write a short c++20 snippet to parse and verify the toml using toml11?

-------------------------------------------------- response

#include <iostream>
#include <toml11/toml.hpp>

int main() {
    try {
        auto config = toml::parse("config.toml");

        std::string name = toml::find<std::string>(config, "name");
        std::cout << "Name: " << name << '\n';

        auto locations = toml::find<std::vector<toml::value>>(config, "locations");
        for (const auto& loc : locations) {
            std::string location = toml::find<std::string>(loc, "location");
            std::string ip = toml::find<std::string>(loc, "ip");
            int port = toml::find<int>(loc, "port");

            std::cout << "Location: " << location << ", IP: " << ip << ", Port: " << port << '\n';

            auto probes = toml::find<std::vector<toml::value>>(loc, "probes");
            for (const auto& probe : probes) {
                int sensor = toml::find<int>(probe, "sensor");
                std::string probe_location = toml::find<std::string>(probe, "location");
                std::cout << "  Sensor: " << sensor << ", Location: " << probe_location << '\n';
            }
        }
    } catch (const std::exception& e) {
        std::cerr << "Error parsing TOML: " << e.what() << '\n';
        return 1;
    }

    return 0;
}

